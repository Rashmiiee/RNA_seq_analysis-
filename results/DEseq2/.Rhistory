shiny::runApp('Documents/Scripts/R/filter_app')
BiocManager::install("gsalib")
BiocManager::install("gsalib")
BiocManager::install("gsalib")
setwd("/Users/rashmirao/Documents/Sidra_Externship/RNAseq/RNA_seq_analysis/results/DEseq2_3")
countdata <- read.table("FeatureCounts.txt", header=TRUE, row.names=1)
countdata <- countdata[ ,6:ncol(countdata)]
new_colnames <- c("SRR18396491", "SRR18396493", "SRR18396494", "SRR18396495", "SRR18396500", "SRR18396512")
colnames(countdata) <- new_colnames
countdata <- as.matrix(countdata)
head(countdata)
dim(countdata)
condition <- factor(c("w/o BRCA2", "w/o BRCA2", "with BRCA2", "w/o BRCA2", "w/o BRCA2", "with BRCA2"))
# Print the conditions to verify
print(condition)
library(DESeq2)
coldata <- data.frame(row.names=colnames(countdata), condition)
# Create DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)
dds
# Run DESeq analysis
dds <- DESeq(dds)
# Plot dispersion estimates
png("qc-dispersions.png", 1000, 1000, pointsize=20)
plotDispEsts(dds, main="Dispersion plot")
dev.off()
rld <- rlogTransformation(dds)
head(assay(rld))
hist(assay(rld))
library(RColorBrewer)
mycols <- brewer.pal(8, "Dark2")[1:length(unique(condition))]
sampleDists <- as.matrix(dist(t(assay(rld))))
library(gplots)
png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "red", "green"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
BiocManager::install("genefilter")
maplot <- function (res, thresh=0.05, labelsig=TRUE, textcx=1, ...) {
with(res, plot(baseMean, log2FoldChange, pch=20, cex=.5, log="x", ...))
with(subset(res, padj < thresh & condition == "w/o BRCA2"), points(baseMean, log2FoldChange, col="red", pch=20, cex=1.5))
with(subset(res, padj < thresh & condition == "with BRCA2"), points(baseMean, log2FoldChange, col="blue", pch=20, cex=1.5))
if (labelsig) {
require(calibrate)
with(subset(res, padj < thresh), textxy(baseMean, log2FoldChange, labs=Gene, cex=textcx, col=ifelse(condition == "w/o BRCA2", "red", "blue")))
}
}
# Example usage
png("diffexpr-maplott.png", 1500, 1000, pointsize=20)
maplot(resdata, main="MA Plot")
maplot <- function (res, thresh=0.05, labelsig=TRUE, textcx=1, ...) {
with(res, plot(baseMean, log2FoldChange, pch=20, cex=.5, log="x", ...))
with(subset(res, padj < thresh & condition == "w/o BRCA2"), points(baseMean, log2FoldChange, col="red", pch=20, cex=1.5))
with(subset(res, padj < thresh & condition == "with BRCA2"), points(baseMean, log2FoldChange, col="blue", pch=20, cex=1.5))
if (labelsig) {
require(calibrate)
with(subset(res, padj < thresh), textxy(baseMean, log2FoldChange, labs=Gene, cex=textcx, col=ifelse(condition == "w/o BRCA2", "red", "blue")))
}
}
# Example usage
png("diffexpr-maplott.png", 1500, 1000, pointsize=20)
maplot(resdata, main="MA Plot")
dev.off()
maplot <- function (res, thresh=0.05, labelsig=TRUE, textcx=1, ...) {
with(res, plot(baseMean, log2FoldChange, pch=20, cex=.5, log="x", ...))
with(subset(res, padj < thresh & condition == "w/o BRCA2"), points(baseMean, log2FoldChange, col="red", pch=20, cex=1.5))
with(subset(res, padj < thresh & condition == "with BRCA2"), points(baseMean, log2FoldChange, col="blue", pch=20, cex=1.5))
if (labelsig) {
require(calibrate)
with(subset(res, padj < thresh), textxy(baseMean, log2FoldChange, labs=Gene, cex=textcx, col=ifelse(condition == "w/o BRCA2", "red", "blue")))
}
}
setwd("/Users/rashmirao/Documents/Sidra_Externship/RNAseq/RNA_seq_analysis/results/DEseq2_3")
countdata <- read.table("FeatureCounts.txt", header=TRUE, row.names=1)
countdata <- countdata[ ,6:ncol(countdata)]
new_colnames <- c("SRR18396491", "SRR18396493", "SRR18396494", "SRR18396495", "SRR18396500", "SRR18396512")
colnames(countdata) <- new_colnames
countdata <- as.matrix(countdata)
head(countdata)
dim(countdata)
condition <- factor(c("w/o BRCA2", "w/o BRCA2", "with BRCA2", "w/o BRCA2", "w/o BRCA2", "with BRCA2"))
# Print the conditions to verify
print(condition)
library(DESeq2)
(coldata <- data.frame(row.names=colnames(countdata), condition))
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)
dds <- DESeq(dds)
png("qc-dispersions.png", 1000, 1000, pointsize=20)
plotDispEsts(dds, main="Dispersion plot")
dev.off()
rld <- rlogTransformation(dds)
head(assay(rld))
hist(assay(rld))
library(RColorBrewer)
(mycols <- brewer.pal(8, "Dark2")[1:length(unique(condition))])
sampleDists <- as.matrix(dist(t(assay(rld))))
library(gplots)
png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "red", "green"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
BiocManager::install("genefilter")
BiocManager::install("calibrate")
library(genefilter)
library(calibrate)
rld_pca <- function (rld, intgroup = "condition", ntop = 500, colors=NULL, legendpos="bottomleft", main="PCA Biplot", textcx=1, ...) {
require(genefilter)
require(calibrate)
require(RColorBrewer)
rv = rowVars(assay(rld))
select = order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
pca = prcomp(t(assay(rld)[select, ]))
fac = factor(apply(as.data.frame(colData(rld)[, intgroup, drop = FALSE]), 1, paste, collapse = " : "))
if (is.null(colors)) {
if (nlevels(fac) >= 3) {
colors = brewer.pal(nlevels(fac), "Paired")
} else {
colors = c("black", "red")
}
}
pc1var <- round(summary(pca)$importance[2,1]*100, digits=1)
pc2var <- round(summary(pca)$importance[2,2]*100, digits=1)
pc1lab <- paste0("PC1 (",as.character(pc1var),"%)")
pc2lab <- paste0("PC2 (",as.character(pc2var),"%)")
plot(PC2~PC1, data=as.data.frame(pca$x), bg=colors[fac], pch=21, xlab=pc1lab, ylab=pc2lab, main=main, ...)
with(as.data.frame(pca$x), textxy(PC1, PC2, labs=rownames(as.data.frame(pca$x)), cex=textcx))
legend(legendpos, legend=levels(fac), col=colors, pch=20)
}
png("qc-pca.png", 1000, 1000, pointsize=20)
rld_pca(rld, colors=mycols, intgroup="condition", xlim=c(-75, 35))
dev.off()
res <- results(dds)
table(res$padj<0.05)
res <- res[order(res$padj), ]
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)
names(resdata)[1] <- "Gene"
head(resdata)
write.csv(resdata, file="diffexpr-results.csv")
hist(res$pvalue, breaks=50, col="grey")
# Function to create MA plot with dual colors
maplot_dual_color <- function (res, thresh=0.05, labelsig=TRUE, textcx=1, ...) {
with(res, plot(baseMean, log2FoldChange, pch=20, cex=.5, log="x", col=ifelse(padj<thresh, "red", "black"), ...))
with(subset(res, padj<thresh), points(baseMean, log2FoldChange, col="red", pch=20, cex=1.5))
if (labelsig) {
require(calibrate)
with(subset(res, padj<thresh), textxy(baseMean, log2FoldChange, labs=Gene, cex=textcx, col=2))
}
}
png("diffexpr-maplot-dual-color.png", 1500, 1000, pointsize=20)
maplot_dual_color(resdata, main="MA Plot with Dual Colors")
dev.off()
volcanoplot <- function (res, lfcthresh=2, sigthresh=0.05, main="Volcano Plot", legendpos="bottomright", labelsig=TRUE, textcx=1, ...) {
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main=main, ...))
with(subset(res, padj<sigthresh ), points(log2FoldChange, -log10(pvalue), pch=20, col="red", ...))
with(subset(res, abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="orange", ...))
with(subset(res, padj<sigthresh & abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="green", ...))
if (labelsig) {
require(calibrate)
with(subset(res, padj<sigthresh & abs(log2FoldChange)>lfcthresh), textxy(log2FoldChange, -log10(pvalue), labs=Gene, cex=textcx, ...))
}
legend(legendpos, xjust=1, yjust=1, legend=c(paste("FDR<",sigthresh,sep=""), paste("|LogFC|>",lfcthresh,sep=""), "both"), pch=20, col=c("red","orange","green"))
}
png("diffexpr-volcanoplot.png", 1200, 1000, pointsize=20)
volcanoplot(resdata, lfcthresh=1, sigthresh=0.05, textcx=.8, xlim=c(-2.3, 2))
dev.off()
setwd("/Users/rashmirao/Documents/Sidra_Externship/RNAseq/RNA_seq_analysis/results/DEseq2_3")
countdata <- read.table("FeatureCounts.txt", header=TRUE, row.names=1)
countdata <- countdata[ ,6:ncol(countdata)]
new_colnames <- c("SRR18396491", "SRR18396493", "SRR18396494", "SRR18396495", "SRR18396500", "SRR18396512")
colnames(countdata) <- new_colnames
countdata <- as.matrix(countdata)
head(countdata)
dim(countdata)
condition <- factor(c("w/o BRCA2", "w/o BRCA2", "with BRCA2", "w/o BRCA2", "w/o BRCA2", "with BRCA2"))
# Print the conditions to verify
print(condition)
library(DESeq2)
(coldata <- data.frame(row.names=colnames(countdata), condition))
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)
dds <- DESeq(dds)
png("qc-dispersions.png", 1000, 1000, pointsize=20)
plotDispEsts(dds, main="Dispersion plot")
dev.off()
dds <- estimateSizeFactors(dds)
dds <- estimateDispersions(dds)
powerAnalysis(dds, alpha=0.05, effectSize=1.5, nGenes=7127)
setwd("/Users/rashmirao/Documents/Sidra_Externship/RNAseq/RNA_seq_analysis/results/DEseq2_3")
countdata <- read.table("FeatureCounts.txt", header=TRUE, row.names=1)
countdata <- countdata[ ,6:ncol(countdata)]
new_colnames <- c("SRR18396491", "SRR18396493", "SRR18396494", "SRR18396495", "SRR18396500", "SRR18396512")
colnames(countdata) <- new_colnames
countdata <- as.matrix(countdata)
head(countdata)
dim(countdata)
condition <- factor(c("w/o BRCA2", "w/o BRCA2", "with BRCA2", "w/o BRCA2", "w/o BRCA2", "with BRCA2"))
# Print the conditions to verify
print(condition)
library(DESeq2)
(coldata <- data.frame(row.names=colnames(countdata), condition))
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)
dds <- DESeq(dds)
# Function to simulate RNA-seq data based on a DESeqDataSet object
simulate_data <- function(dds, effect_size, n_simulations) {
results_list <- list()
for (i in 1:n_simulations) {
# Simulate counts based on the negative binomial distribution
counts <- matrix(nrow=nrow(dds), ncol=ncol(dds))
for (j in 1:nrow(dds)) {
mu <- counts(dds)[j, ]
disp <- dispersions(dds)[j]
counts[j, ] <- rnbinom(ncol(dds), mu=mu * effect_size, size=1/disp)
}
# Create a new DESeqDataSet object with simulated counts
col_data <- colData(dds)
sim_dds <- DESeqDataSetFromMatrix(countData=counts, colData=col_data, design=design(dds))
sim_dds <- estimateSizeFactors(sim_dds)
sim_dds <- estimateDispersions(sim_dds)
sim_dds <- DESeq(sim_dds)
# Store results
res <- results(sim_dds)
results_list[[i]] <- res
}
return(results_list)
}
# Function to calculate power
calculate_power <- function(results_list, alpha, effect_size) {
detected <- 0
for (res in results_list) {
res$padj[is.na(res$padj)] <- 1
detected <- detected + sum(res$padj < alpha & abs(res$log2FoldChange) > log2(effect_size))
}
power <- detected / (length(results_list) * nrow(res))
return(power)
}
effect_size <- 1.5  # Expected fold change
n_simulations <- 100
alpha <- 0.05
# Simulate data and calculate power
simulated_results <- simulate_data(dds, effect_size, n_simulations)
# Set working directory
setwd("/Users/rashmirao/Documents/Sidra_Externship/RNAseq/RNA_seq_analysis/results/DEseq2_3")
# Load count data
countdata <- read.table("FeatureCounts.txt", header=TRUE, row.names=1)
countdata <- countdata[ ,6:ncol(countdata)]
new_colnames <- c("SRR18396491", "SRR18396493", "SRR18396494", "SRR18396495", "SRR18396500", "SRR18396512")
colnames(countdata) <- new_colnames
# Convert count data to matrix and remove NA values
countdata <- as.matrix(countdata)
countdata[is.na(countdata)] <- 0
# Print the first few rows and dimensions to verify
head(countdata)
dim(countdata)
# Define condition factor
condition <- factor(c("w/o BRCA2", "w/o BRCA2", "with BRCA2", "w/o BRCA2", "w/o BRCA2", "with BRCA2"))
# Print the conditions to verify
print(condition)
# Load DESeq2 library
library(DESeq2)
# Create DESeq2 coldata and DESeqDataSet object
coldata <- data.frame(row.names=colnames(countdata), condition)
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)
# Run DESeq2 analysis
dds <- DESeq(dds)
# Function to simulate RNA-seq data based on a DESeqDataSet object
simulate_data <- function(dds, effect_size, n_simulations) {
results_list <- list()
for (i in 1:n_simulations) {
# Simulate counts based on the negative binomial distribution
counts <- matrix(nrow=nrow(dds), ncol=ncol(dds))
for (j in 1:nrow(dds)) {
mu <- counts(dds)[j, ]
disp <- dispersions(dds)[j]
# Handle infinite or NA dispersion values
if (is.infinite(disp) || is.na(disp)) {
disp <- 1
}
# Simulate counts, adding effect size for condition B
counts[j, ] <- rnbinom(ncol(dds), mu=mu * effect_size, size=1/disp)
}
# Ensure no NA values in counts
counts[is.na(counts)] <- 0
# Create a new DESeqDataSet object with simulated counts
col_data <- colData(dds)
sim_dds <- DESeqDataSetFromMatrix(countData=counts, colData=col_data, design=design(dds))
sim_dds <- estimateSizeFactors(sim_dds)
sim_dds <- estimateDispersions(sim_dds)
sim_dds <- DESeq(sim_dds)
# Store results
res <- results(sim_dds)
results_list[[i]] <- res
}
return(results_list)
}
# Function to calculate power
calculate_power <- function(results_list, alpha, effect_size) {
detected <- 0
for (res in results_list) {
res$padj[is.na(res$padj)] <- 1
detected <- detected + sum(res$padj < alpha & abs(res$log2FoldChange) > log2(effect_size))
}
power <- detected / (length(results_list) * nrow(res))
return(power)
}
# Parameters for power analysis
effect_size <- 1.5  # Expected fold change
n_simulations <- 100
alpha <- 0.05
# Simulate data and calculate power
simulated_results <- simulate_data(dds, effect_size, n_simulations)
power_result <- calculate_power(simulated_results, alpha, effect_size)
print(paste("Estimated power:", power_result))
# Set working directory
setwd("/Users/rashmirao/Documents/Sidra_Externship/RNAseq/RNA_seq_analysis/results/DEseq2_3")
# Load count data
countdata <- read.table("FeatureCounts.txt", header=TRUE, row.names=1)
countdata <- countdata[ ,6:ncol(countdata)]
new_colnames <- c("SRR18396491", "SRR18396493", "SRR18396494", "SRR18396495", "SRR18396500", "SRR18396512")
colnames(countdata) <- new_colnames
# Convert count data to matrix and remove NA values
countdata <- as.matrix(countdata)
countdata[is.na(countdata)] <- 0
# Print the first few rows and dimensions to verify
head(countdata)
dim(countdata)
# Define condition factor
condition <- factor(c("w/o BRCA2", "w/o BRCA2", "with BRCA2", "w/o BRCA2", "w/o BRCA2", "with BRCA2"))
# Print the conditions to verify
print(condition)
# Load DESeq2 library
library(DESeq2)
# Create DESeq2 coldata and DESeqDataSet object
coldata <- data.frame(row.names=colnames(countdata), condition)
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)
# Run DESeq2 analysis
dds <- DESeq(dds)
# Estimate size factors and dispersions
dds <- estimateSizeFactors(dds)
dds <- estimateDispersions(dds)
# Perform differential expression analysis
res <- results(dds)
# Set working directory
setwd("/Users/rashmirao/Documents/Sidra_Externship/RNAseq/RNA_seq_analysis/results/DEseq2_3")
# Load count data
countdata <- read.table("FeatureCounts.txt", header=TRUE, row.names=1)
countdata <- countdata[ ,6:ncol(countdata)]
new_colnames <- c("SRR18396491", "SRR18396493", "SRR18396494", "SRR18396495", "SRR18396500", "SRR18396512")
colnames(countdata) <- new_colnames
# Convert count data to matrix and remove NA values
countdata <- as.matrix(countdata)
countdata[is.na(countdata)] <- 0
# Print the first few rows and dimensions to verify
head(countdata)
dim(countdata)
# Define condition factor
condition <- factor(c("w/o BRCA2", "w/o BRCA2", "with BRCA2", "w/o BRCA2", "w/o BRCA2", "with BRCA2"))
# Print the conditions to verify
print(condition)
# Load DESeq2 library
library(DESeq2)
# Create DESeq2 coldata and DESeqDataSet object
coldata <- data.frame(row.names=colnames(countdata), condition)
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)
# Run DESeq2 analysis
dds <- DESeq(dds)
# Check if DESeq2 analysis is completed
if (!"results" %in% ls()) {
stop("DESeq2 analysis did not complete successfully.")
}
# Parameters for power analysis
sum(is.na(countdata))  # Should be 0
tryCatch({
dds <- DESeq(dds)
print("DESeq2 analysis completed successfully.")
}, error = function(e) {
print(paste("Error in DESeq2 analysis:", e$message))
})
res <- results(dds)
# Print summary of results to verify
print(summary(res))
# Function to calculate power based on actual data
calculate_power_from_real_data <- function(res, alpha, effect_size) {
# Ensure no NA values in adjusted p-values
res$padj[is.na(res$padj)] <- 1
# Calculate the number of detected differentially expressed genes
detected <- sum(res$padj < alpha & abs(res$log2FoldChange) > log2(effect_size))
# Calculate power
power <- detected / nrow(res)
return(power)
}
power_result <- calculate_power_from_real_data(res, alpha, effect_size)
power_result
setwd("/Users/rashmirao/Documents/Sidra_Externship/RNAseq/RNA_seq_analysis/results/DEseq2_3")
countdata <- read.table("FeatureCounts.txt", header=TRUE, row.names=1)
countdata <- countdata[ ,6:ncol(countdata)]
new_colnames <- c("SRR18396491", "SRR18396493", "SRR18396494", "SRR18396495", "SRR18396500", "SRR18396512")
colnames(countdata) <- new_colnames
countdata <- as.matrix(countdata)
# Parameters for power analysis
sum(is.na(countdata))  # Should be 0
head(countdata)
dim(countdata)
any(countdata == "NA")
setwd("/Users/rashmirao/Documents/Sidra_Externship/RNAseq/RNA_seq_analysis/results/DEseq2_3")
# Load the count data
countdata <- read.table("FeatureCounts.txt", header=TRUE, row.names=1)
countdata <- countdata[ ,6:ncol(countdata)]
new_colnames <- c("SRR18396491", "SRR18396493", "SRR18396494", "SRR18396495", "SRR18396500", "SRR18396512")
colnames(countdata) <- new_colnames
# Convert count data to matrix
countdata <- as.matrix(countdata)
# Identify non-numeric values
# Create a logical matrix where TRUE indicates non-numeric values
is_non_numeric <- !sapply(countdata, is.numeric)
# Extract non-numeric values
non_numeric_values <- countdata[is_non_numeric]
# Print non-numeric values and their locations
if (any(is_non_numeric)) {
print("Non-numeric values found in countdata:")
non_numeric_locations <- which(is_non_numeric, arr.ind = TRUE)
for (loc in 1:nrow(non_numeric_locations)) {
row <- non_numeric_locations[loc, 1]
col <- non_numeric_locations[loc, 2]
print(paste("Row:", row, "Column:", col, "Value:", countdata[row, col]))
}
} else {
print("All values in countdata are numeric.")
}
countdata_df <- as.data.frame(countdata)
# Save the data frame to a CSV file
write.csv(countdata_df, file = "/Users/rashmirao/Documents/Sidra_Externship/RNAseq/RNA_seq_analysis/results/DEseq2_3/countdata.csv", row.names = TRUE)
